Description: 'AWS CloudFormation Sample Template:
  This template creates an Apache Ranger admin server with an HA deployment.
  **WARNING** You will be billed for the AWS resources used if you create a
  stack from this template.'
Parameters:
  S3Bucket:
    Description: S3 Bucket name where artifacts are stored [update this is you want to run this stack in a region other than US-EAST-1]
    Type: String
    Default: aws-bigdata-blog
  S3Key:
    Description: S3 Bucket prefix where the artifacts are stored [update this is you want to run this stack in a region other than US-EAST-1]
    Type: String
    Default: artifacts/aws-blog-emr-ranger
  VPC:
    Description: VPC ID for creating the Ranger Admin Server
    Type: AWS::EC2::VPC::Id
  Subnet1:
    Description: Subnet ID for creating the Ranger Admin Servers
    Type: AWS::EC2::Subnet::Id
  Subnet2:
    Description: Subnet ID for creating the Ranger Admin Servers
    Type: AWS::EC2::Subnet::Id
  ProjectVersion:
    Default: 3.0
    Description: Template version of the Cloudformation stack
    Type: String
    AllowedValues:
      - 3.0
      - beta
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH to the instances
    Type: AWS::EC2::KeyPair::KeyName
  DBHostName:
    Description: Hostname of the database where the Ranger database is created
    Type: String
  DBRootUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: root
    AllowedValues: ["root"]
    Description: User name a database admin who can creates tables, users and grant privileges
    MaxLength: '25'
    MinLength: '4'
    Type: String
  DBRootPassword:
    Description: Password for the admin user previously specified
    Type: String
    NoEcho: true
  InstanceType:
    Description: Instance type of the Ranger Server
    Type: String
    Default: r5.2xlarge
    AllowedValues:
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  LDAPHostPrivateIP:
    Description: IP Address or hostname of the LDAP server
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: awsemr.com
    Description: Domain managed by the LDAP server (typically this coincide with the Active Directory Domain) e.g., awsemr.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  LDAPSearchBase:
    Description: Base DN managed by the LDAP server
    Type: String
    Default: dc=awsemr,dc=com
  LDAPBindUserName:
    Description: LDAP Bind user used by Ranger to perfom search queries on the LDAP
    Type: String
    Default: binduser
    AllowedValues:
      - binduser
  LDAPBindPassword:
    Description: LDAP Bind user password
    Type: String
    NoEcho: true
  rangerVersion:
    Description: Apache Ranger version installed
    Type: String
    Default: '2.0'
    AllowedValues:
      - '2.0'
  AttachAdditionalSourcePrefixToSG:
    Description: (Optional) Attaches additional sources to the Ranger Admin Security Group
    Default: false
    Type: String
    AllowedValues: [true, false]
  AdditionalSourcePrefixToSG:
    Description: (Optional) Sources that are allowed to access the Ranger Admin Instance. Should be a source prefix
      e.g., pl-xxx
    Type: String
  CIDRAccessToPrivateSubnetResources:
    Description: IP address range (in CIDR notation) of the clients that will be allowed
      to connect to the Ranger Admin using ports 22 (ssh), 6180 and 6182 (ranger UI), 8983 and 8984 (solr)
      e.g., 203.0.113.5/32
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x
  AmazonLinux2ImageId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Artifact Repository
        Parameters:
          - S3Bucket
          - S3Key
          - ProjectVersion
      - Label:
          default: NetworK
        Parameters:
          - VPC
          - Subnet1
          - Subnet2
      - Label:
          default: Ranger Admin Server
        Parameters:
          - AmazonLinux2ImageId
          - InstanceType
          - KeyPairName
          - rangerVersion
          - CIDRAccessToPrivateSubnetResources
          - AttachAdditionalSourcePrefixToSG
          - AdditionalSourcePrefixToSG

      - Label:
          default: Ranger Admin Database
        Parameters:
          - DBHostName
          - DBRootUser
          - DBRootPassword
      - Label:
          default: LDAP Configuration
        Parameters:
          - LDAPHostPrivateIP
          - DomainDNSName
          - LDAPBindUserName
          - LDAPBindPassword
          - LDAPSearchBase

    ParameterLabels:
      S3Bucket:
        default: 'Bucket Name'
      S3Key:
        default: 'Bucket Prefix'
      ProjectVersion:
        default: 'Template Version'

      VPC:
        default: 'Vpc Id'
      Subnet1:
        default: 'Subnet One'
      Subnet2:
        default: 'Subnet Two'

      AmazonLinux2ImageId:
        default: 'Amazon Linux 2 Image'
      InstanceType:
        default: 'Instance Type'
      KeyPairName:
        default: 'SSH Key Name'
      rangerVersion:
        default: 'Ranger Version'
      CIDRAccessToPrivateSubnetResources:
        default: 'Clients CIDR'
      AttachAdditionalSourcePrefixToSG:
        default: 'Attach Additional Source Prefix'
      AdditionalSourcePrefixToSG:
        default: 'Additional Source Prefix'

      DBHostName:
        default: 'Database Hostname'
      DBRootUser:
        default: 'Database Admin User'
      DBRootPassword:
        default: 'Database Admin Password'

      LDAPHostPrivateIP:
        default: 'Hostname'
      DomainDNSName:
        default: 'Domain'
      LDAPBindUserName:
        default: 'Bind User'
      LDAPBindPassword:
        default: 'Bind User Password'
      LDAPSearchBase:
        default: 'Search Base Directory'
Conditions:
  AttachAdditionalSourcePrefixToSG: !Equals [true, !Ref AttachAdditionalSourcePrefixToSG]

Resources:
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/AWSCloudFormationReadOnlyAccess
      - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Path: "/"
  AllowSecretsRetrievalPolivy:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: AllowSecretsRetrieval
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:ListSecrets
              - secretsmanager:DescribeSecret
            Resource:
              - !Join ['', ['arn:aws:secretsmanager:', !Ref "AWS::Region", ':', !Ref "AWS::AccountId", ':secret:emr/ranger*']]
      Roles:
        - !Ref ManagedInstanceRole
  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ManagedInstanceRole
  sgRangerAdminServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Open Up all Ranger Server ports
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6080'
          ToPort: '6080'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '6182'
          ToPort: '6182'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '8983'
          ToPort: '8983'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '8984'
          ToPort: '8984'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
  sgRangerAdminServerWithAdditions:
    Type: AWS::EC2::SecurityGroup
    Condition: AttachAdditionalSourcePrefixToSG
    Properties:
      GroupDescription: Open Up all Ranger Server ports
      VpcId: !Ref 'VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '6080'
          ToPort: '6080'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '6080'
          ToPort: '6080'
          SourcePrefixListId: !Ref AdditionalSourcePrefixToSG
        - IpProtocol: tcp
          FromPort: '6182'
          ToPort: '6182'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '6182'
          ToPort: '6182'
          SourcePrefixListId: !Ref AdditionalSourcePrefixToSG
        - IpProtocol: tcp
          FromPort: '8983'
          ToPort: '8983'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '8983'
          ToPort: '8983'
          SourcePrefixListId: !Ref AdditionalSourcePrefixToSG
        - IpProtocol: tcp
          FromPort: '8984'
          ToPort: '8984'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '8984'
          ToPort: '8984'
          SourcePrefixListId: !Ref AdditionalSourcePrefixToSG
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref CIDRAccessToPrivateSubnetResources
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          SourcePrefixListId: !Ref AdditionalSourcePrefixToSG
  RangerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 14

  RangerLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internal
      Subnets:
      - Ref: Subnet1
      - Ref: Subnet2
      Type: network
  RangerTargetGroupOne:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 6182
      Protocol: TCP
      TargetType: instance
      VpcId: !Ref VPC
  RangerListenerDefault:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref RangerTargetGroupOne
      LoadBalancerArn: !Ref RangerLoadBalancer
      Port: 6182
      Protocol: TCP
  RangerAutoscalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref 'RangerLaunchConfig'
      MinSize: '1'
      MaxSize: '1'
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      TargetGroupARNs:
        - !Ref RangerTargetGroupOne
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: RangerServer
          PropagateAtLaunch: true
  RangerLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref AmazonLinux2ImageId
      SecurityGroups:
        - !If [ AttachAdditionalSourcePrefixToSG, !Ref sgRangerAdminServerWithAdditions, !Ref sgRangerAdminServer ]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref ManagedInstanceProfile
      KeyName: !Ref 'KeyPairName'
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeType: gp2
            VolumeSize: '100'
            DeleteOnTermination: 'true'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          cd /tmp
          aws s3 cp s3://${S3Bucket}/${S3Key}/${ProjectVersion}/scripts/install-ranger-admin-server.sh .
          yum update aws-cfn-bootstrap

          cat <<EOF > /etc/awslogs/awslogs.conf
          [general]
          # Path to the CloudWatch Logs agent's state file. The agent uses this file to maintain
          # client side state across its executions.
          state_file = /var/lib/awslogs/agent-state
          [ranger_admin_setup_log]
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          file = /tmp/create-ranger-server-output.log
          buffer_duration = 500
          log_stream_name = adminsetuplog-{instance_id}
          initial_position = start_of_file
          log_group_name = ${RangerLogGroup}
          [ranger_admin_log]
          datetime_format = %Y-%m-%d %H:%M:%S,%f
          file = /usr/lib/ranger/logs/admin/logs/ranger_admin*
          buffer_duration = 500
          log_stream_name = adminlog-{instance_id}
          initial_position = start_of_file
          log_group_name = ${RangerLogGroup}
          EOF

          sudo yum update -y
          sudo yum install -y awslogs
          sudo systemctl enable awslogsd.service
          sudo systemctl restart awslogsd.service

          chmod +x /tmp/install-ranger-admin-server.sh
          /tmp/install-ranger-admin-server.sh "${LDAPHostPrivateIP}" "${LDAPSearchBase}" "${LDAPBindUserName}@${DomainDNSName}" "${LDAPBindPassword}" "${rangerVersion}" "s3://${S3Bucket}/${S3Key}" "${ProjectVersion}" "${DBHostName}" "${DBRootPassword}" "${AWS::Region}" > create-ranger-server-output.log

Outputs:
  RangerAdminHost:
    Description: Ranger Admin Host
    Value: !GetAtt RangerLoadBalancer.DNSName
